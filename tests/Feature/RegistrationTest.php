<?php

namespace Tests\Feature;

use App\Providers\RouteServiceProvider;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;
use Tests\TestCase;

class RegistrationTest extends TestCase
{
    use RefreshDatabase;

    protected $user;
    protected $email;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = $this->createUser();
        $this->email = $this->createFakeEmail();
    }

    public function test_url_not_exists()
    {
        $response = $this->post('/not-exists')
            ->assertStatus(404);
    }

    public function test_registration_form_access()
    {
        $response = $this->get(route('register.index'))
            ->assertStatus(200);
        $response->assertViewIs('pages.register');
    }

    public function test_create_user_successfully()
    {

        Storage::fake('public');
        $image = $this->createImage('jpg', 500, 500, 1000);
        $response = $this->post(route('register.store'), [
            'name' => $this->user->name,
            'email' => $this->email,
            'password' => 'password',
            'password_confirmation' => 'password',
            'avatar' => $image,
        ])->assertRedirect(RouteServiceProvider::HOME);

        $this->assertAuthenticated();

        Storage::disk('public')->exists($image->hashName());

        $this->assertDatabaseHas('users', [
            'name' => $this->user->name,
            'email' => $this->email,
        ]);
    }

    public function test_registration_required_fields()
    {
        $response = $this->post(route('register.store'), [])->assertRedirect();
        $response->assertSessionHasErrors(['name', 'email', 'password', 'avatar']);
    }

    public function test_registration_incorrect_email()
    {
        $image = $this->createImage('jpg', 500, 500, 1000);
        $response = $this->post(route('register.store'), [
            'name' => $this->user->name,
            'email' => 'not-email',
            'password' => 'password',
            'password_confirmation' => 'password',
            'avatar' => $image,
        ])->assertRedirect();

        $response->assertSessionHasErrors('email');
    }

    public function test_email_not_unique()
    {
        $image = $this->createImage('jpg', 500, 500, 1000);
        $response = $this->post(route('register.store'), [
            'name' => $this->user->name,
            'email' => $this->user->email,
            'password' => 'password',
            'password_confirmation' => 'password',
            'avatar' => $image,
        ])->assertRedirect();

        $response->assertSessionHasErrors('email');
    }

    public function test_password_doesnt_match()
    {
        $image = $this->createImage('jpg', 500, 500, 1000);
        $response = $this->post(route('register.store'), [
            'name' => $this->user->name,
            'email' => $this->email,
            'password' => 'password123',
            'password_confirmation' => 'password',
            'avatar' => $image,
        ])->assertRedirect();

        $response->assertSessionHasErrors('password');
    }

    public function test_avatar_mime_type_incorrect()
    {
        $image = $this->createImage('incorrect', 500, 500, 1000);
        $response = $this->post(route('register.store'), [
            'name' => $this->user->name,
            'email' => $this->email,
            'password' => 'password',
            'password_confirmation' => 'password',
            'avatar' => $image,
        ])->assertRedirect();

        $response->assertSessionHasErrors('avatar');
    }

    public function test_avatar_not_image_type()
    {
        $response = $this->post(route('register.store'), [
            'name' => $this->user->name,
            'email' => $this->email,
            'password' => 'password',
            'password_confirmation' => 'password',
            'avatar' => 'string',
        ])->assertRedirect();

        $response->assertSessionHasErrors('avatar');
    }

    public function test_max_size_avatar_more_then_max_size()
    {
        $image = $this->createImage('jpg', 500, 500, 5000);
        $response = $this->post(route('register.store'), [
            'name' => $this->user->name,
            'email' => $this->email,
            'password' => 'password',
            'password_confirmation' => 'password',
            'avatar' => $image,
        ])->assertRedirect();

        $response->assertSessionHasErrors('avatar');
    }

    public function test_name_min_length()
    {
        $image = $this->createImage('jpg', 500, 500, 1000);
        $response = $this->post(route('register.store'), [
            'name' => 'dd',
            'email' => $this->email,
            'password' => 'password',
            'password_confirmation' => 'password',
            'avatar' => $image,
        ])->assertRedirect();

        $response->assertSessionHasErrors('name');
    }

    public function test_name_max_length()
    {
        $image = $this->createImage('jpg', 500, 500, 1000);
        $response = $this->post(route('register.store'), [
            'name' => Str::random(60),
            'email' => $this->email,
            'password' => 'password',
            'password_confirmation' => 'password',
            'avatar' => $image,
        ])->assertRedirect();

        $response->assertSessionHasErrors('name');
    }

    public function test_email_max_length()
    {
        $image = $this->createImage('jpg', 500, 500, 1000);
        $response = $this->post(route('register.store'), [
            'name' => $this->user->name,
            'email' => Str::random(60),
            'password' => 'password',
            'password_confirmation' => 'password',
            'avatar' => $image,
        ])->assertRedirect();

        $response->assertSessionHasErrors('email');
    }

    public function test_password_max_length()
    {
        $image = $this->createImage('jpg', 500, 500, 1000);
        $response = $this->post(route('register.store'), [
            'name' => $this->user->name,
            'email' => $this->email,
            'password' => Str::random(60),
            'password_confirmation' => Str::random(60),
            'avatar' => $image,
        ])->assertRedirect();

        $response->assertSessionHasErrors('password');
    }
}
