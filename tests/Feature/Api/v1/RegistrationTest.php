<?php


namespace Tests\Feature\Api\v1;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Hash;
use Tests\BaseApiTest;
use Tests\TestCase;

class RegistrationTest extends TestCase
{


    use WithFaker;
    use RefreshDatabase;

    /**
     * A basic feature test example.
     *
     * @return void
     */
    protected $user;
    protected $fakeEmail;

    public function setUp(): void
    {
        parent::setUp();

        $this->user = $this->createUser();
        $this->fakeEmail = $this->createFakeEmail();
        /*        $this->withHeaders([
                   'Accept' => 'application/json'
                ]);*/
    }

    public function test_register_user()
    {
        $response = $this->postJson(route('api.register'), [
            'name' => $this->user->name,
            'email' => $this->fakeEmail,
            'password' => 'password',
            'password_confirmation' => 'password',
        ])->assertStatus(201);
        $this->assertTrue(Hash::check('password', $this->user->password));

        $this->assertDatabaseHas('users', [
            'email' => $this->user->email,
        ]);

        $response->assertJsonStructure([
            'status',
            'data' => [
                'id',
                'name',
                'email'
            ],
            'token'
        ]);
    }

    /*    public function test_incorrect_url(){
            $this->withoutExceptionHandling();
            $response = $this->get('/non-existent-page');

            $response->assertStatus(404);
        }*/

    /*    public function test_required_fields(string $url, array $fields, array $structure)
        {
            $this->withoutExceptionHandling();
            parent::test_required_fields('api.register', ['name', 'email', 'password'], ['message', 'errors']); // TODO: Change the autogenerated stub
        }*/

    public function test_required_fields_registration()
    {
        $response = $this->postJson(route('api.register'))->assertStatus(422);

        $response->assertUnprocessable();
        $response->assertJsonValidationErrors(['name', 'email', 'password']);

        $response->assertJsonStructure([
            'message',
            'errors',
        ]);
    }

    public function test_incorrect_email_registration()
    {
        $response = $this->postJson(route('api.register'), [
            'name' => $this->user->name,
            'email' => 'not-email',
            'password' => 'password',
            'password_confirmation' => 'password',
        ])->assertStatus(422);

        $response->assertJsonValidationErrors(['email']);

        $response->assertJsonStructure([
            'message',
            'errors',
        ]);
    }

    public function test_passwords_unmatched_registration()
    {
        $response = $this->postJson(route('api.register'), [
            'name' => $this->user->name,
            'email' => $this->fakeEmail,
            'password' => 'password123',
            'password_confirmation' => 'password',
        ])->assertStatus(422);

        $response->assertJsonValidationErrors(['password']);

        $response->assertJsonStructure([
            'message',
            'errors',
        ]);
    }

    public function test_email_already_exists_registration()
    {
        $response = $this->postJson(route('api.register'), [
            'name' => $this->user->name,
            'email' => $this->user->email,
            'password' => 'password',
            'password_confirmation' => 'password',
        ])->assertStatus(422);

        $response->assertUnprocessable();
        $response->assertJsonValidationErrors(['email']);

        $response->assertJsonStructure([
            'message',
            'errors',
        ]);
    }

    public function test_min_symbols_name_registration()
    {
        $response = $this->postJson(route('api.register'), [
            'name' => 'dd',
            'email' => $this->user->email,
            'password' => 'password',
            'password_confirmation' => 'password',
        ])->assertStatus(422);

        $response->assertJsonValidationErrors(['name']);

        $response->assertUnprocessable();
        $response->assertJsonStructure([
            'message',
            'errors',
        ]);
    }

    public function test_url_not_exists()
    {
        $response = $this->postJson('/not-exists')
            ->assertStatus(404);
    }
}
