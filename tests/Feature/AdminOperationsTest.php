<?php

namespace Tests\Feature;

use App\Enums\RoleEnum;
use Tests\TestCase;

class AdminOperationsTest extends TestCase
{
    /**
     * A basic feature test example.
     *
     * @return void
     */
    protected $admin;
    protected $user;
    protected $email;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->admin = $this->createAdmin();
        $this->user = $this->createUser();
        $this->email = $this->createFakeEmail();
    }

    public function test_guest_can_not_get_access_in_admin_panel()
    {
        $response = $this->get(route('admin.index'))
            ->assertRedirect(route('login.index'));
    }

    public function test_auth_user_can_not_get_access_in_admin_panel()
    {
        $response = $this->actingAs($this->user)->get(route('admin.index'))
            ->assertForbidden();
    }

    public function test_admin_can_get_access_in_admin_panel()
    {
        $response = $this->actingAs($this->admin)->get(route('admin.index'))
            ->assertOk();
    }

    public function test_admin_can_open_users_list()
    {
        $response = $this->actingAs($this->admin)->get(route('users.user.index'))
            ->assertOk();
        $response->assertViewIs('admin.users.index');
    }

    public function test_admin_can_open_user_create_page()
    {
        $response = $this->actingAs($this->admin)->get(route('users.user.create'))
            ->assertOk();
        $response->assertViewIs('admin.users.create');
    }

    public function test_create_user_admin_in_panel()
    {
        $email = $this->createFakeEmail();
        $response = $this->actingAs($this->admin)->post(route('users.user.store'), [
            'name' => $this->user->name,
            'email' => $this->email,
            'password' => 'password',
            'role' => fake()->numberBetween(RoleEnum::USER->value, RoleEnum::ADMIN->value),
        ])->assertRedirect(route('users.user.index'));

        $this->assertDatabaseHas('users', [
            'name' => $this->user->name,
            'email' => $this->email,
        ]);
    }

    public function test_admin_can_open_edit_user_page()
    {
        $response = $this->actingAs($this->admin)->get(route('users.user.edit', $this->user->id))
            ->assertOk();
        $response->assertViewIs('admin.users.edit');
    }

    public function test_admin_can_update_user()
    {
        $user = $this->createUser();
        $response = $this->actingAs($this->admin)->patch(route('users.user.update', $user->id), [
            'name' => 'new' . $user->name,
            'email' => $user->email,
            'password' => 'password',
            'role' => fake()->numberBetween(RoleEnum::USER->value, RoleEnum::ADMIN->value),
        ]);
        $this->assertDatabaseHas('users', [
            'name' => 'new' . $user->name,
            'email' => $user->email,
        ]);
    }

    public function test_admin_can_delete_user()
    {
        $response = $this->actingAs($this->admin)->delete(route('users.user.destroy', $this->user->id))
            ->assertRedirect(route('users.user.index'));

        $this->assertDatabaseMissing('users', [
            'name' => $this->user->name,
            'email' => $this->user->email,
        ]);
    }

    public function test_caches_are_hitting()
    {

    }

}
